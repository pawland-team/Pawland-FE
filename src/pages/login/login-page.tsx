import { useEffect, useState } from 'react';
import { useForm } from 'react-hook-form';

import Head from 'next/head';

import * as S from './login-page-style';

export const LoginPage = () => {
  const [showPassword, setShowPassword] = useState(false);

  const toggleShowPassword = () => {
    setShowPassword(!showPassword);
  };

  const {
    register,
    handleSubmit,
    watch,
    setError,
    formState: { errors },
  } = useForm({ mode: 'onChange' });
  const password = watch('password');
  const email = watch('email');

  const onSubmit = async (data) => {
    const response = await fetch(`http://43.200.183.10:8080/api/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: data.email,
        password: data.password,
      }),
    });

    if (response.status === 201) {
      // 로그인 완료 관련 알림 모달 띄우기
      console.log('로그인이 완료되었습니다.');
    }
  };

  return (
    <>
      <Head>
        <title>Pawland Login</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <main>
        <S.SignupPageContainer>
          <S.SignupPageTitleContainer>
            <S.SignupPageTitle>로고</S.SignupPageTitle>
          </S.SignupPageTitleContainer>
          <S.SignupPageForm noValidate onSubmit={handleSubmit(onSubmit)}>
            <S.SignupPageInputContainer>
              <S.SignupInputIcon src='input-email-icon.svg' alt='input-email-icon' />
              <S.SignupPageInput
                type='email'
                placeholder='이메일을 입력해주세요.'
                style={{ borderColor: errors.email && 'red' }}
                {...register('email', {
                  required: '* 이메일을 입력해주세요.',
                  pattern: {
                    value: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/,
                    message: '* 이메일 형식이 올바르지 않습니다.',
                  },
                })}
              />
            </S.SignupPageInputContainer>
            {errors.email && <S.SignupPageErrorSpan>{errors.email.message}</S.SignupPageErrorSpan>}
            {emailVerified && (
              <>
                <S.SignupPageInputContainer>
                  <S.SignupInputIcon src='input-email-icon.svg' alt='input-email-icon' />
                  <S.SignupPageVerifyInput
                    type='text'
                    placeholder='인증번호를 입력해주세요.'
                    style={{ borderColor: errors.verificationCode && 'red' }}
                    {...register('verificationCode', {
                      required: '* 인증번호를 입력해주세요.',
                      minLength: {
                        value: 6,
                        message: '* 인증번호는 6자리 숫자입니다.',
                      },
                      maxLength: {
                        value: 6,
                        message: '* 인증번호는 6자리 숫자입니다.',
                      },
                      pattern: {
                        value: /^[0-9]{6}$/,
                        message: '* 인증번호는 숫자로만 구성되어야 합니다.',
                      },
                    })}
                    onBlur={(e) => setVerificationCodeEntered(e.target.value)}
                  />
                  <S.SignupPageTimerSpan>{formatTime(timer)}</S.SignupPageTimerSpan>
                  {verificationSuccess ? (
                    <S.SignupPageEmailVerificationDisabledButton type='button' disabled={verificationSuccess}>
                      인증완료
                    </S.SignupPageEmailVerificationDisabledButton>
                  ) : (
                    <S.SignupPageEmailVerificationButton
                      type='button'
                      style={{ backgroundColor: verificationCodeEntered ? '#F5511D' : '#9E9E9E' }}
                      disabled={!verificationCodeEntered || verificationSuccess}
                      onClick={handleCompleteVerification}
                    >
                      인증완료
                    </S.SignupPageEmailVerificationButton>
                  )}
                </S.SignupPageInputContainer>
                {errors.verificationCode && (
                  <S.SignupPageErrorSpan>{errors.verificationCode.message}</S.SignupPageErrorSpan>
                )}
              </>
            )}

            <S.SignupPageInputContainer>
              <S.SignupInputIcon src='input-password-icon.svg' alt='input-password-icon' />
              <S.SignupPageInput
                type={showPassword ? 'text' : 'password'}
                placeholder='비밀번호를 적어주세요.'
                style={{ borderColor: errors.password && 'red' }}
                {...register('password', {
                  required: '* 비밀번호를 입력해주세요.',
                  minLength: {
                    value: 8,
                    message: '* 영문, 숫자를 포함한 8자 이상의 비밀번호를 입력해주세요.',
                  },
                  pattern: {
                    value: /^(?=.*[a-zA-Z])(?=.*[0-9]).{8,}$/,
                    message: '* 영문, 숫자를 포함한 8자 이상의 비밀번호를 입력해주세요.',
                  },
                })}
              />
              <S.SignupInputPasswordShowOrHideButton type='button' onClick={toggleShowPassword}>
                <img
                  src={showPassword ? '/input-eye-open-icon.svg' : '/input-eye-close-icon.svg'}
                  alt='show-or-hide-password-icon'
                />
              </S.SignupInputPasswordShowOrHideButton>
            </S.SignupPageInputContainer>
            {errors.password && <S.SignupPageErrorSpan>{errors.password.message}</S.SignupPageErrorSpan>}
            <S.SignupPageInputContainer>
              <S.SignupInputIcon src='input-password-icon.svg' alt='input-password-confirm-icon' />
              <S.SignupPageInput
                type={showPasswordConfirmation ? 'text' : 'password'}
                placeholder='비밀번호를 한 번 더 적어주세요.'
                style={{ borderColor: errors.password && 'red' }}
                {...register('passwordConfirmation', {
                  required: '* 비밀번호를 입력해주세요.',
                  validate: (value) => value === password || '* 비밀번호가 일치하지 않습니다.',
                })}
              />
              <S.SignupInputPasswordShowOrHideButton type='button' onClick={toggleShowPasswordConfirmation}>
                <img
                  src={showPasswordConfirmation ? '/input-eye-open-icon.svg' : '/input-eye-close-icon.svg'}
                  alt='show-or-hide-password-confirmation-icon'
                />
              </S.SignupInputPasswordShowOrHideButton>
            </S.SignupPageInputContainer>
            {errors.passwordConfirmation && (
              <S.SignupPageErrorSpan>{errors.passwordConfirmation.message}</S.SignupPageErrorSpan>
            )}
            {verificationSuccess ? (
              <S.SignupPageSubmitButton type='submit'>회원가입</S.SignupPageSubmitButton>
            ) : (
              <S.SignupPageDisabledButton type='submit' disabled>
                인증을 진행해 주세요.
              </S.SignupPageDisabledButton>
            )}
          </S.SignupPageForm>
          <S.SignupPageBottomContainer>
            <S.SignupPageBottomSpan>이미 포랜드 계정이 있으신가요?</S.SignupPageBottomSpan>
            <S.SignupPageBottomLink>로그인하기</S.SignupPageBottomLink>
          </S.SignupPageBottomContainer>
        </S.SignupPageContainer>
      </main>
    </>
  );
};
